# -*- coding: utf-8 -*-
"""Hanwritten digits dataset using Autoencoders.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10QmlUJa-bYhsEqKZOVPuuRnoeyPCi2m8

# Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from keras .datasets import mnist
from keras.models import Model
from keras.layers import Dense, Input

"""# Import the data"""

(X_train, _),(X_test, _) = mnist.load_data()
#We dont have to put y_test as we dont have to assign the value of the target in any of the variable

X_train[0][5]

X_train.shape
#60000 datapoints with 28 rows and 28 columns

X_test.shape

X_train = X_train/255.0
X_test = X_test/255.0

X_train[0][5]

#now to reshape
X_train = X_train.reshape(len(X_train), 28*28)
X_test = X_test.reshape(len(X_test), 28*28)

X_train.shape

plt.figure(figsize=(10,5))
for i in range (10): #10 as in for getting the first 10 images
  ax = plt.subplot(1,10, i+1)
  plt.imshow(X_train[i].reshape(28,28))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
plt.suptitle('Tain Data', fontsize = 20)

def show_visual(data, title, n=10, height= 28, width=28): #n for how many the user wants
  plt.figure(figsize=(10,5))
  for i in range (n):
    ax = plt.subplot(1,n, i+1)
    plt.imshow(data[i].reshape(height, width))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
  plt.suptitle(title, fontsize = 20)

show_visual(X_train, title= 'Train Data')
show_visual(X_test, title= 'Test Data')

input_dm, output_dm = 784,784
encode_dim = 100
hidden_dim = 256 #range of that

#Encoder
input_layer = Input(shape=(input_dm,), name = "INPUT")
hidden_layer_1 = Dense(hidden_dim, activation='relu', name = "HIDDEN_1")(input_layer)

#Bottle Neck
bottleneck = Dense(encode_dim, activation='relu', name = "BOTTLE_NECK")(hidden_layer_1) #encode_dim cuz its getting the input from the encoder

#Decoder
hidden_layer_2 =  Dense(hidden_dim, activation='relu', name = "HIDDEN_2")(bottleneck)
output_layer = Dense(output_dm, activation='sigmoid', name = "OUTPUT")(hidden_layer_2)
# using the sigmoid function to get the output in the 0 and 1 form so that if its below 0.5 it will be discarded or if its above 0.5 it will be allowed

model = Model(input_layer, output_layer)

model.compile(optimizer='adam', loss='binary_crossentropy')

model.summary()

model.fit(X_train, X_train, epochs= 10)

decoded_data = model.predict(X_test)

get_encoded_data = Model(inputs= model.input,
                         outputs= model.get_layer("BOTTLE_NECK").output)

encoded_data = get_encoded_data.predict(X_test)

show_visual(X_test, title= 'Actual Data')
show_visual(encoded_data, title= 'Encoded Data', height= 10, width=10)
show_visual(decoded_data, title= 'Decoded Data')